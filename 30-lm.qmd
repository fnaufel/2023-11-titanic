---
title: "Titanic competition: multiple logistic regression"
author: "Fernando Náufel"
date: now
date-format: "DD/MM/YYYY HH:mm"
lang: pt

#bibliography: bibliography.bib
#csl: universidade-do-porto-faculdade-de-engenharia-chicago-pt-crono.csl

format:
  html:
    toc: true  
    toc-depth: 3
    number-depth: 3
    theme: 
      - journal
      - _custom.scss
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: ^(?:http:|https:)\/\/fnaufel\.github\.io
    df-print: paged
---

{{< include _math.qmd >}}


# Setup

```{r setup}
source('_setup.R')
source('R/functions.R')
```

# Objetivos

Fazer regressão logística: `survived ~ .`.


# Usando só `train.csv`

## Leitura

```{r}
df <- ler(
  'dados/train_faixas_imputadas.csv'
) %>% 
  mutate(survived = factor(survived))
```

```{r}
df %>% glimpse()
```


## Split

```{r}
split <- initial_split(df, strata = survived)
treino <- training(split)
teste <- testing(split)
```


## Workflow e modelo

```{r}
modelo <- 
  logistic_reg(penalty = 0.1) %>% 
  set_engine('glmnet')
```

```{r}
wf <- 
  workflow() %>% 
  add_model(modelo)

wf
```


## Receita

```{r}
receita <- recipe(treino) %>% 
  update_role(
    pclass, sex, sib_sp, par_ch, embarked, faixa, title, 
    new_role = 'predictor'
  ) %>% 
  update_role(survived, new_role = 'outcome') %>% 
  update_role(id, name, new_role = 'id') %>% 
  step_impute_mode(embarked) %>% 
  step_dummy(
    pclass, sex, embarked, faixa, title
  ) %>% 
  step_rm(ticket, fare, cabin)
```

```{r}
receita
```

```{r}
summary(receita)
```


### Verificando a receita

```{r}
df_transformado <- aplicar(receita)
```

```{r}
df_transformado
```

```{r}
df_transformado %>% glimpse()
```


## Adicionar ao *workflow*

```{r}
wf <- wf %>% 
  add_recipe(receita)
```

```{r}
wf
```


## Treinar

```{r}
modelo_treino <- wf %>% fit(treino)
```


## Testar

```{r}
previsoes <- modelo_treino %>% predict(teste)
```

```{r}
teste %>% 
  bind_cols(previsoes) %>% 
  accuracy(truth = survived, estimate = .pred_class)
```

## Treinar no conjunto inteiro

```{r}
modelo_tudo <- wf %>% 
  update_model(modelo) %>% 
  fit(df)
```


## Prever `test.csv` para submissão

```{r}
teste_kaggle <- ler('dados/test_faixas_imputadas.csv')
```

```{r}
previsoes_kaggle <- modelo_tudo %>% 
  predict(teste_kaggle)
```

```{r}
df_submeter <- teste_kaggle %>% 
  select(PassengerId = id) %>% 
  bind_cols(previsoes_kaggle %>% rename(Survived = .pred_class))
```

```{r}
df_submeter %>% 
  write_csv('dados/2023-11-26-glmnet.csv')
```

Uma das previsões deu NA!

```{r}
df_submeter %>% 
  count(Survived)
```

